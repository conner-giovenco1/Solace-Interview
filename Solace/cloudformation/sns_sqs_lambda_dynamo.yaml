AWSTemplateFormatVersion: '2010-09-09'
Description: SNS → SQS → Lambda → DynamoDB pipeline with IAM roles

Parameters:
  LambdaCodeS3Bucket:
    Type: String
  LambdaCodeS3Key:
    Type: String

Resources:

  # SNS Topic
  UserEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: user-events

  # SQS Dead-Letter Queue
  UserEventsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: user-events-dlq
      MessageRetentionPeriod: 1209600

  # SQS Main Queue
  UserEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: user-events-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UserEventsDLQ.Arn
        maxReceiveCount: 5

  # SNS → SQS Subscription
  TopicToQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref UserEventsTopic
      Protocol: sqs
      Endpoint: !GetAtt UserEventsQueue.Arn

  # DynamoDB Table
  UserEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserEvents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ProcessUserInfoRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt UserEventsTable.Arn

  # Lambda Layers (pre-published)
  PandasLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: pandas-layer
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: layers/pandas.zip
      CompatibleRuntimes: [ python3.9 ]

  PyarrowLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: pyarrow-layer
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: layers/pyarrow.zip
      CompatibleRuntimes: [ python3.9 ]

  PillowLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: pillow-layer
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: layers/pillow.zip
      CompatibleRuntimes: [ python3.9 ]

  # Lambda Function
  ProcessUserInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessUserInfo
      Handler: lambda_process_userinfo.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Layers:
        - !Ref PandasLayer
        - !Ref PyarrowLayer
        - !Ref PillowLayer
      Environment:
        Variables:
          DDB_TABLE: !Ref UserEventsTable

  # Event Source Mapping from SQS to Lambda
  SQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt UserEventsQueue.Arn
      FunctionName: !GetAtt ProcessUserInfoFunction.Arn
      BatchSize: 10
      Enabled: true

Outputs:
  TopicArn:
    Value: !Ref UserEventsTopic
  QueueUrl:
    Value: !Ref UserEventsQueue
  LambdaArn:
    Value: !GetAtt ProcessUserInfoFunction.Arn
  DynamoDBTable:
    Value: !Ref UserEventsTable
